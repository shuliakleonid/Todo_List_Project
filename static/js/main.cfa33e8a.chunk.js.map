{"version":3,"sources":["components/app-header/AppHeader.tsx","components/search-panel/SearchPanel.tsx","components/todo-list-item/TodoListItem.tsx","components/todo-list/TodoList.tsx","components/item-status-filter/ItemStatusFilter.tsx","components/item-add-form/ItemAddForm.tsx","components/app/App.tsx","index.tsx"],"names":["AppHeader","toDo","done","className","SearchPanel","searchForm","useState","value","setValue","type","placeholder","onChange","e","target","TodoListItem","id","label","deleteTask","onDoneTask","isDone","important","importantTask","setImportantTask","style","color","fontWeight","doneStyle","onClick","onLabelClick","onDeleteTask","TodoList","todos","filter","newTodo","el","liElements","map","ItemStatusFilter","sortTasks","addButtons","name","clazz","onFilterClick","v1","ItemAddForm","onAddNewTask","valueInput","setValueInput","currentTarget","App","createTodoItem","text","todoData","todo","setTodo","setFilter","onToggleDone","onToggleNotDone","length","console","log","toLowerCase","indexOf","newTask","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cfa33e8a.chunk.js","sourcesContent":["import React, {FunctionComponent} from 'react';\r\n\r\ntype AppHeaderPropsType = {\r\n  toDo: number\r\n  done:number\r\n}\r\n\r\nconst AppHeader: FunctionComponent<AppHeaderPropsType> = ({toDo,done}) => {\r\n  return (\r\n      <div className=\"app-header d-flex\">\r\n        <h1>Todo List</h1>\r\n        <h2>{toDo} more to do, {done} done</h2>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default AppHeader;\r\n","import React, {ChangeEvent, useState} from 'react';\r\n\r\ntype SearchPanelPropsType = {\r\n  searchForm: (value: string) => void\r\n}\r\n\r\nconst SearchPanel = ({searchForm}: SearchPanelPropsType) => {\r\n  const [value, setValue] = useState<string>('')\r\n  const onSearchForm = (e: ChangeEvent<HTMLInputElement>) => {\r\n    searchForm(e.target.value)\r\n    setValue(e.target.value)\r\n  }\r\n\r\n  return <input type=\"text\" placeholder='Search' className=\"form-control search-input\" value={value}\r\n                onChange={onSearchForm}/>\r\n};\r\n\r\nexport default SearchPanel;\r\n","import React, {FunctionComponent, useState} from 'react';\r\nimport CSS from 'csstype';\r\nimport './TodoListItem.css'\r\n\r\ntype TodoListItemPropsType = {\r\n  id: string\r\n  isDone:boolean\r\n  label: string\r\n  important: boolean\r\n  deleteTask: (id: string) => void\r\n  onDoneTask:(id: string,isDone:boolean) => void\r\n}\r\n\r\nconst TodoListItem: FunctionComponent<TodoListItemPropsType> = ({id, label, deleteTask,onDoneTask, isDone,important = false}) => {\r\n  const [importantTask, setImportantTask] = useState<boolean>(important);\r\n  const onLabelClick=(id:string)=>{\r\n    onDoneTask(id,isDone)\r\n  }\r\n  const onDeleteTask = (id: string) => {\r\n    deleteTask(id)\r\n  }\r\n  const onImportantTask = () => {\r\n    setImportantTask(!importantTask)\r\n  }\r\n  const style: CSS.Properties = {\r\n    color: importantTask ? 'steelblue' : 'black',\r\n    fontWeight: importantTask ? 'bold' : 'normal'\r\n  };\r\n  let doneStyle= isDone ? 'todo-list-item-label done':'todo-list-item-label'\r\n  return (\r\n      <span className=\"todo-list-item\">\r\n        <span\r\n            onClick={()=>onLabelClick(id)}\r\n            className={`${doneStyle}`}\r\n            style={style}>\r\n        {label}\r\n       </span>\r\n        <span className='button-section'>\r\n            <button onClick={onImportantTask}\r\n                    type=\"button\"\r\n                    className=\"btn btn-outline-success btn-sm float-right\">\r\n                   <i className=\"fa fa-exclamation\"/>\r\n            </button>\r\n            <button onClick={() => onDeleteTask(id)}\r\n                    type=\"button\"\r\n                    className=\"btn btn-outline-danger btn-sm float-right\">\r\n                    <i className=\"fa fa-trash-o\"/>\r\n            </button>\r\n        </span>\r\n      </span>\r\n  );\r\n};\r\n\r\nexport default TodoListItem;\r\n","import React, {FunctionComponent} from 'react';\r\nimport TodoListItem from '../todo-list-item/TodoListItem'\r\nimport './TodoList.css'\r\n\r\nexport type TasksType = {\r\n  id: string\r\n  label: string\r\n  isDone: boolean\r\n  important: boolean\r\n}\r\ntype TodoListPropsType = {\r\n  filter: string\r\n  todos: Array<TasksType>\r\n  deleteTask: (id: string) => void\r\n  onDoneTask: (id: string, isDone: boolean) => void\r\n}\r\n\r\nconst TodoList: FunctionComponent<TodoListPropsType> = ({todos, deleteTask, onDoneTask, filter}) => {\r\n  let newTodo = [...todos]\r\n  if (filter === 'active') {\r\n    newTodo = todos.filter(el => !el.isDone)\r\n  } else if (filter === 'done') {\r\n    newTodo = todos.filter(el => el.isDone)\r\n  }\r\n  const liElements = newTodo.map((el) => {\r\n    const {id} = el//разделяем деструктуризацией объект на части(отделяем ID)\r\n    return <li className='list-group-item' key={id}>\r\n      <TodoListItem {...el} deleteTask={deleteTask} onDoneTask={onDoneTask}/>\r\n    </li>//при совпадении пропсов мы можем передать всё спред оператором\r\n  })\r\n  return (\r\n      <ul className='list-group todo-list'>\r\n        {liElements}\r\n      </ul>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, {FunctionComponent} from 'react';\r\nimport {v1} from 'uuid';\r\ntype Button={\r\n  name:string\r\n  label:string\r\n}\r\ntype ItemStatusFilterPropsType = {\r\n  sortTasks: (filter: string) => void\r\n  filter: string\r\n}\r\nconst ItemStatusFilter: FunctionComponent<ItemStatusFilterPropsType> = ({sortTasks, filter}) => {\r\n  const onFilterClick = (filter: string) => {\r\n    sortTasks(filter)\r\n  }\r\n  const buttons:Array<Button> = [\r\n    {name: 'all', label: 'All'},\r\n    {name: 'active', label: 'Active'},\r\n    {name: 'done', label: 'Done'},\r\n  ]\r\n  const addButtons = buttons.map(({name, label}) => {\r\n        let isActive = filter === name;\r\n        let clazz = isActive ? 'btn-info' : 'btn-outline-secondary'\r\n    return <button key={v1()} className={`btn ${clazz}`} type='button' onClick={()=>onFilterClick(name)}>{label}</button>\r\n      }\r\n  )\r\n  return (\r\n      <div className=\"btn-group\">\r\n        {addButtons}\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default ItemStatusFilter;\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport './ItemAddForm.css'\r\n\r\ntype ItemAddFormPropsType = {\r\n  onAddNewTask: (value: string) => void\r\n}\r\n\r\nconst ItemAddForm = ({onAddNewTask}: ItemAddFormPropsType) => {\r\n  const [valueInput, setValueInput] = useState<string>('')\r\n  const addTask = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setValueInput(e.currentTarget.value)\r\n\r\n  }\r\n  return (\r\n      <>\r\n        <input placeholder='New task' className='form-control item-add-form' onChange={addTask} value={valueInput}/>\r\n        <button onClick={() => (onAddNewTask(valueInput),()=> setValueInput(''))}\r\n        className='btn btn-outline-secondary'>Add Task\r\n        </button>\r\n      </>\r\n  );\r\n};\r\n\r\nexport default ItemAddForm;\r\n","import React, {useState} from 'react';\nimport AppHeader from '../app-header/AppHeader';\nimport SearchPanel from '../search-panel/SearchPanel';\nimport TodoList, {TasksType} from '../todo-list/TodoList';\nimport ItemStatusFilter from '../item-status-filter/ItemStatusFilter';\nimport './App.css'\nimport ItemAddForm from '../item-add-form/ItemAddForm';\nimport {v1} from 'uuid';\n\nconst App = () => {\n  const createTodoItem = (text: string): TasksType => {\n    return {\n      label: text,\n      important: false,\n      id: v1(),\n      isDone: false\n    }\n  }//функция создания таски\n  const todoData: Array<TasksType> = [\n    createTodoItem('Drink Coffee'),\n    createTodoItem('Make Awesome App'),\n    createTodoItem('Have a lunch'),\n  ]//массив тасок(изначальный)\n  const [todo, setTodo] = useState<Array<TasksType>>(todoData)//массив тасок\n  const [filter, setFilter] = useState('all')\n  const deleteTask = (id: string) => {\n    setTodo(todo.filter(el => el.id !== id ? {...el} : ''))\n  } //удаляем таску\n  const onDoneTask = (id: string, isDone: boolean) => {\n    setTodo(todo.map(el => el.id === id ? {...el, isDone: !isDone} : {...el}))\n  } //зачеркиваем таску когда выполнена\n  const onAddNewTask = (label: string) => {\n    const newTask: TasksType = createTodoItem(label)\n    setTodo([...todo, newTask])\n  }//добавляем новую таску\n  const sortTasks = (filter: string) => {\n    switch (filter) {\n        // case 'all':\n        // return setFilter('all');\n      case 'active':\n        return setFilter('active')\n      case 'done':\n        return setFilter('done')\n      default:\n        return setFilter('all')\n    }\n  }// фильтруем элементы по флагу\n  const searchForm = (value: string) => {\n    console.log('Поиск', todo.filter(el => el.label.toLowerCase().indexOf(value) > -1))\n\n    // setTodo(todo.filter(el => el.label.toLowerCase().indexOf(value) > -1))\n    setTodo(todoData.filter(el => el.label.toLowerCase().indexOf(value) > -1))\n  }//поиск по значению\n\n  let onToggleDone = todo.filter(el => el.isDone)\n  let onToggleNotDone = todo.filter(el => !el.isDone)\n  return (\n      <div className=\"todo-app\">\n        <AppHeader toDo={onToggleNotDone.length} done={onToggleDone.length}/>\n        <div className=\"top-panel d-flex\">\n          <SearchPanel searchForm={searchForm}/>\n          <ItemStatusFilter sortTasks={sortTasks} filter={filter}/>\n        </div>\n        <TodoList todos={todo} filter={filter} deleteTask={deleteTask} onDoneTask={onDoneTask}/>\n        <ItemAddForm onAddNewTask={onAddNewTask}/>\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}